name: "build"
on:
    push:
        branches:
            - "master"
        paths-ignore:
            - "*.md"
    pull_request:
        paths-ignore:
            - "*.md"
    workflow_dispatch: ~

env:
    APP_ENV: "test"
    DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?serverVersion=5.7"
    PHP_EXTENSIONS: "intl, mbstring"

jobs:
    coding-standards:
        name: "Coding Standards"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@2.18.0"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Install composer dependencies"
                uses: "ramsey/composer-install@v1"
                with:
                    dependency-versions: "${{ matrix.dependencies }}"

            -   name: "Validate composer"
                run: "composer validate --strict"

            -   name: "Check composer normalized"
                run: "composer normalize --dry-run"

            -   name: "Check style"
                run: "composer check-style"

            -   name: "Lint yaml files"
                run: "(cd tests/Application && bin/console lint:yaml ../../src/Resources)"

            -   name: "Lint twig files"
                run: "(cd tests/Application && bin/console lint:twig ../../src/Resources)"

    dependency-analysis:
        name: "Dependency Analysis"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@2.18.0"
                with:
                    coverage: "none"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    php-version: "${{ matrix.php-version }}"
                    tools: "composer-require-checker, composer-unused"

            -   name: "Install composer dependencies"
                uses: "ramsey/composer-install@v1"
                with:
                    dependency-versions: "${{ matrix.dependencies }}"

            -   name: "Run maglnet/composer-require-checker"
                run: "composer-require-checker check --config-file=$(pwd)/composer-require-checker.json"

            -   name: "Run composer-unused/composer-unused"
                run: "composer-unused"

    static-code-analysis:
        name: "Static Code Analysis"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@2.18.0"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Install composer dependencies"
                uses: "ramsey/composer-install@v1"
                with:
                    dependency-versions: "${{ matrix.dependencies }}"

            -   name: "Cache warmup"
                run: "(cd tests/Application && bin/console cache:warmup)"

            -   name: "Static analysis"
                run: "composer analyse"

    unit-tests:
        name: "Unit tests"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.4"

                dependencies:
                    - "lowest"
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@2.18.0"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Install composer dependencies"
                uses: "ramsey/composer-install@v1"
                with:
                    dependency-versions: "${{ matrix.dependencies }}"

            -   name: "Run phpunit"
                run: "composer phpunit"

            -   name: "Run phpspec"
                run: "composer phpspec"

    integration-tests:
        name: "Integration tests"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Start MySQL"
                run: "sudo /etc/init.d/mysql start"

            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@2.18.0"
                with:
                    php-version: "${{ matrix.php-version }}"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    coverage: "none"

            -   name: "Install composer dependencies"
                uses: "ramsey/composer-install@v1"
                with:
                    dependency-versions: "${{ matrix.dependencies }}"

            -   name: "Lint container"
                run: "(cd tests/Application && bin/console lint:container) || true"

            -   name: "Create database"
                run: "(cd tests/Application && bin/console doctrine:database:create -vvv)"

            -   name: "Create database schema"
                run: "(cd tests/Application && bin/console doctrine:schema:create -vvv)"

            -   name: "Validate Doctrine mapping"
                run: "(cd tests/Application && bin/console doctrine:schema:validate -vvv)"

    code-coverage:
        name: "Code Coverage"

        runs-on: "ubuntu-latest"

        strategy:
            matrix:
                php-version:
                    - "7.4"

                dependencies:
                    - "highest"

        steps:
            -   name: "Checkout"
                uses: "actions/checkout@v2"

            -   name: "Setup PHP, with composer and extensions"
                uses: "shivammathur/setup-php@2.18.0"
                with:
                    coverage: "pcov"
                    extensions: "${{ env.PHP_EXTENSIONS }}"
                    php-version: "${{ matrix.php-version }}"

            -   name: "Set up problem matchers for phpunit/phpunit"
                run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

            -   name: "Install composer dependencies"
                uses: "ramsey/composer-install@v1"
                with:
                    dependency-versions: "${{ matrix.dependencies }}"

            -   name: "Collect code coverage with pcov and phpunit/phpunit"
                run: "vendor/bin/phpunit --coverage-clover=.build/logs/clover.xml"

            -   name: "Send code coverage report to Codecov.io"
                env:
                    CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
                run: "bash <(curl -s https://codecov.io/bash)"
